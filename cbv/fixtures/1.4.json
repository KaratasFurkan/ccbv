[
{
 "model": "cbv.projectversion",
 "fields": {
  "project": [
   "Django"
  ],
  "version_number": "1.4",
  "sortable_version_number": "0104"
 }
},
{
 "model": "cbv.module",
 "fields": {
  "project_version": [
   "Django",
   "1.4"
  ],
  "name": "django.contrib.formtools.wizard.views",
  "docstring": "",
  "filename": "/django/contrib/formtools/wizard/views.py"
 }
},
{
 "model": "cbv.module",
 "fields": {
  "project_version": [
   "Django",
   "1.4"
  ],
  "name": "django.views.generic",
  "docstring": "",
  "filename": "/django/views/generic/__init__.py"
 }
},
{
 "model": "cbv.module",
 "fields": {
  "project_version": [
   "Django",
   "1.4"
  ],
  "name": "django.views.generic.base",
  "docstring": "",
  "filename": "/django/views/generic/base.py"
 }
},
{
 "model": "cbv.module",
 "fields": {
  "project_version": [
   "Django",
   "1.4"
  ],
  "name": "django.views.generic.dates",
  "docstring": "",
  "filename": "/django/views/generic/dates.py"
 }
},
{
 "model": "cbv.module",
 "fields": {
  "project_version": [
   "Django",
   "1.4"
  ],
  "name": "django.views.generic.detail",
  "docstring": "",
  "filename": "/django/views/generic/detail.py"
 }
},
{
 "model": "cbv.module",
 "fields": {
  "project_version": [
   "Django",
   "1.4"
  ],
  "name": "django.views.generic.edit",
  "docstring": "",
  "filename": "/django/views/generic/edit.py"
 }
},
{
 "model": "cbv.module",
 "fields": {
  "project_version": [
   "Django",
   "1.4"
  ],
  "name": "django.views.generic.list",
  "docstring": "",
  "filename": "/django/views/generic/list.py"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "CookieWizardView",
  "docstring": "A WizardView with pre-configured CookieStorage backend.",
  "line_number": 564,
  "import_path": "django.contrib.formtools.wizard.views",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "NamedUrlCookieWizardView",
  "docstring": "A NamedUrlFormWizard with pre-configured CookieStorageBackend.",
  "line_number": 698,
  "import_path": "django.contrib.formtools.wizard.views",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "NamedUrlSessionWizardView",
  "docstring": "A NamedUrlWizardView with pre-configured SessionStorage backend.",
  "line_number": 691,
  "import_path": "django.contrib.formtools.wizard.views",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "NamedUrlWizardView",
  "docstring": "A WizardView with URL named steps support.",
  "line_number": 571,
  "import_path": "django.contrib.formtools.wizard.views",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "SessionWizardView",
  "docstring": "A WizardView with pre-configured SessionStorage backend.",
  "line_number": 557,
  "import_path": "django.contrib.formtools.wizard.views",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "StepsHelper",
  "docstring": "",
  "line_number": 29,
  "import_path": "django.contrib.formtools.wizard.views",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "WizardView",
  "docstring": "The WizardView is used to create multi-page forms and handles all the\nstorage and validation stuff. The wizard is based on Django's generic\nclass based views.",
  "line_number": 95,
  "import_path": "django.contrib.formtools.wizard.views",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic",
   "Django",
   "1.4"
  ],
  "name": "GenericViewError",
  "docstring": "A problem in a generic view.",
  "line_number": 10,
  "import_path": "django.views.generic",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "RedirectView",
  "docstring": "A view that provides a redirect on any GET request.",
  "line_number": 127,
  "import_path": "django.views.generic",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "TemplateResponseMixin",
  "docstring": "A mixin that can be used to render a template.",
  "line_number": 82,
  "import_path": "django.views.generic.base",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "TemplateView",
  "docstring": "A view that renders a template.",
  "line_number": 113,
  "import_path": "django.views.generic",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "View",
  "docstring": "Intentionally simple parent class for all views. Only implements\ndispatch-by-method and simple sanity checking.",
  "line_number": 11,
  "import_path": "django.views.generic",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "ArchiveIndexView",
  "docstring": "Top-level archive of date-based items.",
  "line_number": 253,
  "import_path": "django.views.generic",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "BaseArchiveIndexView",
  "docstring": "Base class for archives of date-based items.\n\nRequires a response mixin.",
  "line_number": 230,
  "import_path": "django.views.generic.dates",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "BaseDateDetailView",
  "docstring": "Detail view of a single object on a single date; this differs from the\nstandard DetailView by accepting a year/month/day in the URL.",
  "line_number": 447,
  "import_path": "django.views.generic.dates",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "BaseDateListView",
  "docstring": "Abstract base class for date-based views display a list of objects.",
  "line_number": 165,
  "import_path": "django.views.generic.dates",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "BaseDayArchiveView",
  "docstring": "List of objects published on a given day.",
  "line_number": 382,
  "import_path": "django.views.generic.dates",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "BaseMonthArchiveView",
  "docstring": "List of objects published in a given year.",
  "line_number": 301,
  "import_path": "django.views.generic.dates",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "BaseTodayArchiveView",
  "docstring": "List of objects published today.",
  "line_number": 428,
  "import_path": "django.views.generic.dates",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "BaseWeekArchiveView",
  "docstring": "List of objects published in a given week.",
  "line_number": 340,
  "import_path": "django.views.generic.dates",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "BaseYearArchiveView",
  "docstring": "List of objects published in a given year.",
  "line_number": 260,
  "import_path": "django.views.generic.dates",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "DateDetailView",
  "docstring": "Detail view of a single object on a single date; this differs from the\nstandard DetailView by accepting a year/month/day in the URL.",
  "line_number": 483,
  "import_path": "django.views.generic",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "DateMixin",
  "docstring": "Mixin class for views manipulating date-based data.",
  "line_number": 142,
  "import_path": "django.views.generic.dates",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "DayArchiveView",
  "docstring": "List of objects published on a given day.",
  "line_number": 421,
  "import_path": "django.views.generic",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "DayMixin",
  "docstring": "",
  "line_number": 78,
  "import_path": "django.views.generic.dates",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "MonthArchiveView",
  "docstring": "List of objects published in a given year.",
  "line_number": 333,
  "import_path": "django.views.generic",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "MonthMixin",
  "docstring": "",
  "line_number": 37,
  "import_path": "django.views.generic.dates",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "TodayArchiveView",
  "docstring": "List of objects published today.",
  "line_number": 440,
  "import_path": "django.views.generic",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "WeekArchiveView",
  "docstring": "List of objects published in a given week.",
  "line_number": 375,
  "import_path": "django.views.generic",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "WeekMixin",
  "docstring": "",
  "line_number": 117,
  "import_path": "django.views.generic.dates",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "YearArchiveView",
  "docstring": "List of objects published in a given year.",
  "line_number": 294,
  "import_path": "django.views.generic",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "YearMixin",
  "docstring": "",
  "line_number": 12,
  "import_path": "django.views.generic.dates",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "name": "BaseDetailView",
  "docstring": "",
  "line_number": 96,
  "import_path": "django.views.generic.detail",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "name": "DetailView",
  "docstring": "Render a \"detail\" view of an object.\n\nBy default this is a model instance looked up from `self.queryset`, but the\nview will support display of *any* object by overriding `self.get_object()`.",
  "line_number": 144,
  "import_path": "django.views.generic",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "name": "SingleObjectMixin",
  "docstring": "Provides the ability to retrieve a single object for further manipulation.",
  "line_number": 8,
  "import_path": "django.views.generic.detail",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "name": "SingleObjectTemplateResponseMixin",
  "docstring": "",
  "line_number": 103,
  "import_path": "django.views.generic.detail",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "BaseCreateView",
  "docstring": "Base view for creating an new object instance.\n\nUsing this base class requires subclassing to provide a response mixin.",
  "line_number": 160,
  "import_path": "django.views.generic.edit",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "BaseDeleteView",
  "docstring": "Base view for deleting an object.\n\nUsing this base class requires subclassing to provide a response mixin.",
  "line_number": 229,
  "import_path": "django.views.generic.edit",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "BaseFormView",
  "docstring": "A base view for displaying a form",
  "line_number": 148,
  "import_path": "django.views.generic.edit",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "BaseUpdateView",
  "docstring": "Base view for updating an existing object.\n\nUsing this base class requires subclassing to provide a response mixin.",
  "line_number": 183,
  "import_path": "django.views.generic.edit",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "CreateView",
  "docstring": "View for creating an new object instance,\nwith a response rendered by template.",
  "line_number": 175,
  "import_path": "django.views.generic",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "DeleteView",
  "docstring": "View for deleting an object retrieved with `self.get_object()`,\nwith a response rendered by template.",
  "line_number": 237,
  "import_path": "django.views.generic",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "DeletionMixin",
  "docstring": "A mixin providing the ability to delete objects",
  "line_number": 206,
  "import_path": "django.views.generic.edit",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "FormMixin",
  "docstring": "A mixin that provides a way to show and handle a form in a request.",
  "line_number": 9,
  "import_path": "django.views.generic.edit",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "FormView",
  "docstring": "A view for displaying a form, and rendering a template response.",
  "line_number": 154,
  "import_path": "django.views.generic",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "ModelFormMixin",
  "docstring": "A mixin that provides a way to show and handle a modelform in a request.",
  "line_number": 66,
  "import_path": "django.views.generic.edit",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "ProcessFormView",
  "docstring": "A mixin that processes a form on POST.",
  "line_number": 125,
  "import_path": "django.views.generic.edit",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "UpdateView",
  "docstring": "View for updating an object,\nwith a response rendered by template..",
  "line_number": 198,
  "import_path": "django.views.generic",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "name": "BaseListView",
  "docstring": "",
  "line_number": 112,
  "import_path": "django.views.generic.list",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "name": "ListView",
  "docstring": "Render some list of objects, set by `self.model` or `self.queryset`.\n`self.queryset` can actually be any iterable of items, not just a queryset.",
  "line_number": 149,
  "import_path": "django.views.generic",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "name": "MultipleObjectMixin",
  "docstring": "",
  "line_number": 9,
  "import_path": "django.views.generic.list",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "name": "MultipleObjectTemplateResponseMixin",
  "docstring": "",
  "line_number": 123,
  "import_path": "django.views.generic.list",
  "docs_url": ""
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "CookieWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "storage_name",
  "value": "'django.contrib.formtools.wizard.storage.cookie.CookieStorage'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "NamedUrlCookieWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "storage_name",
  "value": "'django.contrib.formtools.wizard.storage.cookie.CookieStorage'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "NamedUrlSessionWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "storage_name",
  "value": "'django.contrib.formtools.wizard.storage.session.SessionStorage'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "done_step_name",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "url_name",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "SessionWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "storage_name",
  "value": "'django.contrib.formtools.wizard.storage.session.SessionStorage'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "all",
  "value": "<property object at 0x7fa56935c8e8>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "count",
  "value": "<property object at 0x7fa56935c9f0>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "current",
  "value": "<property object at 0x7fa56935ca48>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "first",
  "value": "<property object at 0x7fa56935caa0>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "index",
  "value": "<property object at 0x7fa56935cc00>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "last",
  "value": "<property object at 0x7fa56935caf8>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "next",
  "value": "<property object at 0x7fa56935cb50>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "prev",
  "value": "<property object at 0x7fa56935cba8>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "step0",
  "value": "<property object at 0x7fa56935cc58>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "step1",
  "value": "<property object at 0x7fa56935ccb0>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "condition_dict",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "form_list",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "initial_dict",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "instance_dict",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "storage_name",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "template_name",
  "value": "'formtools/wizard/wizard_form.html'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.4"
  ],
  "name": "args",
  "value": "<attribute 'args' of 'exceptions.BaseException' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.4"
  ],
  "name": "__delattr__",
  "value": "<slot wrapper '__delattr__' of 'exceptions.BaseException' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.4"
  ],
  "name": "__getattribute__",
  "value": "<slot wrapper '__getattribute__' of 'exceptions.BaseException' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.4"
  ],
  "name": "__getitem__",
  "value": "<slot wrapper '__getitem__' of 'exceptions.BaseException' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.4"
  ],
  "name": "__getslice__",
  "value": "<slot wrapper '__getslice__' of 'exceptions.BaseException' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.4"
  ],
  "name": "__init__",
  "value": "<slot wrapper '__init__' of 'exceptions.Exception' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.4"
  ],
  "name": "message",
  "value": "<attribute 'message' of 'exceptions.BaseException' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.4"
  ],
  "name": "__reduce__",
  "value": "<method '__reduce__' of 'exceptions.BaseException' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.4"
  ],
  "name": "__repr__",
  "value": "<slot wrapper '__repr__' of 'exceptions.BaseException' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.4"
  ],
  "name": "__setattr__",
  "value": "<slot wrapper '__setattr__' of 'exceptions.BaseException' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.4"
  ],
  "name": "__setstate__",
  "value": "<method '__setstate__' of 'exceptions.BaseException' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.4"
  ],
  "name": "__str__",
  "value": "<slot wrapper '__str__' of 'exceptions.BaseException' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.4"
  ],
  "name": "__unicode__",
  "value": "<method '__unicode__' of 'exceptions.BaseException' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "permanent",
  "value": "True",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "query_string",
  "value": "False",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "url",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "response_class",
  "value": "<class 'django.template.response.TemplateResponse'>",
  "line_number": 136
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "template_name",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "http_method_names",
  "value": "['get', 'post', 'put', 'delete', 'head', 'options', 'trace']",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "ArchiveIndexView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "template_name_suffix",
  "value": "'_archive'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "BaseArchiveIndexView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "context_object_name",
  "value": "'latest'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "allow_empty",
  "value": "False",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "BaseYearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "make_object_list",
  "value": "False",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "DateMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "allow_future",
  "value": "False",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "DateMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "date_field",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "DayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "template_name_suffix",
  "value": "'_archive_day'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "day",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "day_format",
  "value": "'%d'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "MonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "template_name_suffix",
  "value": "'_archive_month'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "month",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "month_format",
  "value": "'%b'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "TodayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "template_name_suffix",
  "value": "'_archive_day'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "WeekArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "template_name_suffix",
  "value": "'_archive_week'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "week",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "week_format",
  "value": "'%U'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "YearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "template_name_suffix",
  "value": "'_archive_year'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "year",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "year_format",
  "value": "'%Y'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "name": "context_object_name",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "name": "model",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "name": "pk_url_kwarg",
  "value": "'pk'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "name": "queryset",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "name": "slug_field",
  "value": "'slug'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "name": "slug_url_kwarg",
  "value": "'slug'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "name": "template_name_field",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "name": "template_name_suffix",
  "value": "'_detail'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "CreateView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "template_name_suffix",
  "value": "'_form'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "DeleteView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "template_name_suffix",
  "value": "'_confirm_delete'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "DeletionMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "success_url",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "form_class",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "initial",
  "value": "{}",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "success_url",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "UpdateView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "template_name_suffix",
  "value": "'_form'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "name": "allow_empty",
  "value": "True",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "name": "context_object_name",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "name": "model",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "name": "paginate_by",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "name": "paginator_class",
  "value": "<class 'django.core.paginator.Paginator'>",
  "line_number": 12
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "name": "queryset",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "name": "template_name_suffix",
  "value": "'_list'",
  "line_number": -1
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "get",
  "docstring": "This renders the form or, if needed, does the http redirects.",
  "code": "def get(self, *args, **kwargs):\n    \"\"\"\n    This renders the form or, if needed, does the http redirects.\n    \"\"\"\n    step_url = kwargs.get('step', None)\n    if step_url is None:\n        if 'reset' in self.request.GET:\n            self.storage.reset()\n            self.storage.current_step = self.steps.first\n        if self.request.GET:\n            query_string = \"?%s\" % self.request.GET.urlencode()\n        else:\n            query_string = \"\"\n        return redirect(self.get_step_url(self.steps.current)\n                        + query_string)\n    # is the current step the \"done\" name/view?\n    elif step_url == self.done_step_name:\n        last_step = self.steps.last\n        return self.render_done(self.get_form(step=last_step,\n            data=self.storage.get_step_data(last_step),\n            files=self.storage.get_step_files(last_step)\n        ), **kwargs)\n    # is the url step name not equal to the step in the storage?\n    # if yes, change the step in the storage (if name exists)\n    elif step_url == self.steps.current:\n        # URL step name and storage step name are equal, render!\n        return self.render(self.get_form(\n            data=self.storage.current_step_data,\n            files=self.storage.current_step_files,\n        ), **kwargs)\n    elif step_url in self.get_form_list():\n        self.storage.current_step = step_url\n        return self.render(self.get_form(\n            data=self.storage.current_step_data,\n            files=self.storage.current_step_files,\n        ), **kwargs)\n    # invalid step name, reset to first and redirect.\n    else:\n        self.storage.current_step = self.steps.first\n        return redirect(self.get_step_url(self.steps.first))\n",
  "kwargs": "self, *args, **kwargs",
  "line_number": 599
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "get_context_data",
  "docstring": "NamedUrlWizardView provides the url_name of this wizard in the context\ndict `wizard`.",
  "code": "def get_context_data(self, form, **kwargs):\n    \"\"\"\n    NamedUrlWizardView provides the url_name of this wizard in the context\n    dict `wizard`.\n    \"\"\"\n    context = super(NamedUrlWizardView, self).get_context_data(form=form, **kwargs)\n    context['wizard']['url_name'] = self.url_name\n    return context\n",
  "kwargs": "self, form, **kwargs",
  "line_number": 655
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "get_initkwargs",
  "docstring": "We require a url_name to reverse URLs later. Additionally users can\npass a done_step_name to change the URL name of the \"done\" view.",
  "code": "@classmethod\ndef get_initkwargs(cls, *args, **kwargs):\n    \"\"\"\n    We require a url_name to reverse URLs later. Additionally users can\n    pass a done_step_name to change the URL name of the \"done\" view.\n    \"\"\"\n    assert 'url_name' in kwargs, 'URL name is needed to resolve correct wizard URLs'\n    extra_kwargs = {\n        'done_step_name': kwargs.pop('done_step_name', 'done'),\n        'url_name': kwargs.pop('url_name'),\n    }\n    initkwargs = super(NamedUrlWizardView, cls).get_initkwargs(*args, **kwargs)\n    initkwargs.update(extra_kwargs)\n    assert initkwargs['done_step_name'] not in initkwargs['form_list'], \\\n        'step name \"%s\" is reserved for \"done\" view' % initkwargs['done_step_name']\n    return initkwargs\n",
  "kwargs": "cls, *args, **kwargs",
  "line_number": 578
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "get_step_url",
  "docstring": "",
  "code": "def get_step_url(self, step):\n    return reverse(self.url_name, kwargs={'step': step})\n",
  "kwargs": "self, step",
  "line_number": 596
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "post",
  "docstring": "Do a redirect if user presses the prev. step button. The rest of this\nis super'd from WizardView.",
  "code": "def post(self, *args, **kwargs):\n    \"\"\"\n    Do a redirect if user presses the prev. step button. The rest of this\n    is super'd from WizardView.\n    \"\"\"\n    wizard_goto_step = self.request.POST.get('wizard_goto_step', None)\n    if wizard_goto_step and wizard_goto_step in self.get_form_list():\n        self.storage.current_step = wizard_goto_step\n        return redirect(self.get_step_url(wizard_goto_step))\n    return super(NamedUrlWizardView, self).post(*args, **kwargs)\n",
  "kwargs": "self, *args, **kwargs",
  "line_number": 644
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "render_done",
  "docstring": "When rendering the done view, we have to redirect first (if the URL\nname doesn't fit).",
  "code": "def render_done(self, form, **kwargs):\n    \"\"\"\n    When rendering the done view, we have to redirect first (if the URL\n    name doesn't fit).\n    \"\"\"\n    if kwargs.get('step', None) != self.done_step_name:\n        return redirect(self.get_step_url(self.done_step_name))\n    return super(NamedUrlWizardView, self).render_done(form, **kwargs)\n",
  "kwargs": "self, form, **kwargs",
  "line_number": 681
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "render_next_step",
  "docstring": "When using the NamedUrlWizardView, we have to redirect to update the\nbrowser's URL to match the shown step.",
  "code": "def render_next_step(self, form, **kwargs):\n    \"\"\"\n    When using the NamedUrlWizardView, we have to redirect to update the\n    browser's URL to match the shown step.\n    \"\"\"\n    next_step = self.get_next_step()\n    self.storage.current_step = next_step\n    return redirect(self.get_step_url(next_step))\n",
  "kwargs": "self, form, **kwargs",
  "line_number": 664
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "render_revalidation_failure",
  "docstring": "When a step fails, we have to redirect the user to the first failing\nstep.",
  "code": "def render_revalidation_failure(self, failed_step, form, **kwargs):\n    \"\"\"\n    When a step fails, we have to redirect the user to the first failing\n    step.\n    \"\"\"\n    self.storage.current_step = failed_step\n    return redirect(self.get_step_url(failed_step))\n",
  "kwargs": "self, failed_step, form, **kwargs",
  "line_number": 673
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "__dir__",
  "docstring": "",
  "code": "def __dir__(self):\n    return self.all\n",
  "kwargs": "self",
  "line_number": 34
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "__init__",
  "docstring": "",
  "code": "def __init__(self, wizard):\n    self._wizard = wizard\n",
  "kwargs": "self, wizard",
  "line_number": 31
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "__len__",
  "docstring": "",
  "code": "def __len__(self):\n    return self.count\n",
  "kwargs": "self",
  "line_number": 37
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "__repr__",
  "docstring": "",
  "code": "def __repr__(self):\n    return '<StepsHelper for %s (steps: %s)>' % (self._wizard, self.all)\n",
  "kwargs": "self",
  "line_number": 40
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "as_view",
  "docstring": "This method is used within urls.py to create unique wizardview\ninstances for every request. We need to override this method because\nwe add some kwargs which are needed to make the wizardview usable.",
  "code": "@classonlymethod\ndef as_view(cls, *args, **kwargs):\n    \"\"\"\n    This method is used within urls.py to create unique wizardview\n    instances for every request. We need to override this method because\n    we add some kwargs which are needed to make the wizardview usable.\n    \"\"\"\n    initkwargs = cls.get_initkwargs(*args, **kwargs)\n    return super(WizardView, cls).as_view(**initkwargs)\n",
  "kwargs": "cls, *args, **kwargs",
  "line_number": 111
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "dispatch",
  "docstring": "This method gets called by the routing engine. The first argument is\n`request` which contains a `HttpRequest` instance.\nThe request is stored in `self.request` for later use. The storage\ninstance is stored in `self.storage`.\n\nAfter processing the request using the `dispatch` method, the\nresponse gets updated by the storage engine (for example add cookies).",
  "code": "def dispatch(self, request, *args, **kwargs):\n    \"\"\"\n    This method gets called by the routing engine. The first argument is\n    `request` which contains a `HttpRequest` instance.\n    The request is stored in `self.request` for later use. The storage\n    instance is stored in `self.storage`.\n    After processing the request using the `dispatch` method, the\n    response gets updated by the storage engine (for example add cookies).\n    \"\"\"\n    # add the storage engine to the current wizardview instance\n    self.prefix = self.get_prefix(*args, **kwargs)\n    self.storage = get_storage(self.storage_name, self.prefix, request,\n        getattr(self, 'file_storage', None))\n    self.steps = StepsHelper(self)\n    response = super(WizardView, self).dispatch(request, *args, **kwargs)\n    # update the response (e.g. adding cookies)\n    self.storage.update_response(response)\n    return response\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 208
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "done",
  "docstring": "This method must be overridden by a subclass to process to form data\nafter processing all steps.",
  "code": "def done(self, form_list, **kwargs):\n    \"\"\"\n    This method must be overridden by a subclass to process to form data\n    after processing all steps.\n    \"\"\"\n    raise NotImplementedError(\"Your %s class has not defined a done() \"\n        \"method, which is required.\" % self.__class__.__name__)\n",
  "kwargs": "self, form_list, **kwargs",
  "line_number": 548
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "get",
  "docstring": "This method handles GET requests.\n\nIf a GET request reaches this point, the wizard assumes that the user\njust starts at the first step or wants to restart the process.\nThe data of the wizard will be resetted before rendering the first step.",
  "code": "def get(self, request, *args, **kwargs):\n    \"\"\"\n    This method handles GET requests.\n    If a GET request reaches this point, the wizard assumes that the user\n    just starts at the first step or wants to restart the process.\n    The data of the wizard will be resetted before rendering the first step.\n    \"\"\"\n    self.storage.reset()\n    # reset the current step to the first step.\n    self.storage.current_step = self.steps.first\n    return self.render(self.get_form())\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 229
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "get_all_cleaned_data",
  "docstring": "Returns a merged dictionary of all step cleaned_data dictionaries.\nIf a step contains a `FormSet`, the key will be prefixed with formset\nand contain a list of the formset cleaned_data dictionaries.",
  "code": "def get_all_cleaned_data(self):\n    \"\"\"\n    Returns a merged dictionary of all step cleaned_data dictionaries.\n    If a step contains a `FormSet`, the key will be prefixed with formset\n    and contain a list of the formset cleaned_data dictionaries.\n    \"\"\"\n    cleaned_data = {}\n    for form_key in self.get_form_list():\n        form_obj = self.get_form(\n            step=form_key,\n            data=self.storage.get_step_data(form_key),\n            files=self.storage.get_step_files(form_key)\n        )\n        if form_obj.is_valid():\n            if isinstance(form_obj.cleaned_data, (tuple, list)):\n                cleaned_data.update({\n                    'formset-%s' % form_key: form_obj.cleaned_data\n                })\n            else:\n                cleaned_data.update(form_obj.cleaned_data)\n    return cleaned_data\n",
  "kwargs": "self",
  "line_number": 434
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "get_cleaned_data_for_step",
  "docstring": "Returns the cleaned data for a given `step`. Before returning the\ncleaned data, the stored values are being revalidated through the\nform. If the data doesn't validate, None will be returned.",
  "code": "def get_cleaned_data_for_step(self, step):\n    \"\"\"\n    Returns the cleaned data for a given `step`. Before returning the\n    cleaned data, the stored values are being revalidated through the\n    form. If the data doesn't validate, None will be returned.\n    \"\"\"\n    if step in self.form_list:\n        form_obj = self.get_form(step=step,\n            data=self.storage.get_step_data(step),\n            files=self.storage.get_step_files(step))\n        if form_obj.is_valid():\n            return form_obj.cleaned_data\n    return None\n",
  "kwargs": "self, step",
  "line_number": 456
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "get_context_data",
  "docstring": "Returns the template context for a step. You can overwrite this method\nto add more data for all or some steps. This method returns a\ndictionary containing the rendered form step. Available template\ncontext variables are:\n\n * all extra data stored in the storage backend\n * `form` - form instance of the current step\n * `wizard` - the wizard instance itself\n\nExample:\n\n.. code-block:: python\n\n    class MyWizard(WizardView):\n        def get_context_data(self, form, **kwargs):\n            context = super(MyWizard, self).get_context_data(form=form, **kwargs)\n            if self.steps.current == 'my_step_name':\n                context.update({'another_var': True})\n            return context",
  "code": "def get_context_data(self, form, **kwargs):\n    \"\"\"\n    Returns the template context for a step. You can overwrite this method\n    to add more data for all or some steps. This method returns a\n    dictionary containing the rendered form step. Available template\n    context variables are:\n     * all extra data stored in the storage backend\n     * `form` - form instance of the current step\n     * `wizard` - the wizard instance itself\n    Example:\n    .. code-block:: python\n        class MyWizard(WizardView):\n            def get_context_data(self, form, **kwargs):\n                context = super(MyWizard, self).get_context_data(form=form, **kwargs)\n                if self.steps.current == 'my_step_name':\n                    context.update({'another_var': True})\n                return context\n    \"\"\"\n    context = super(WizardView, self).get_context_data(**kwargs)\n    context.update(self.storage.extra_data)\n    context['wizard'] = {\n        'form': form,\n        'steps': self.steps,\n        'management_form': ManagementForm(prefix=self.prefix, initial={\n            'current_step': self.steps.current,\n        }),\n    }\n    return context\n",
  "kwargs": "self, form, **kwargs",
  "line_number": 507
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "get_form",
  "docstring": "Constructs the form for a given `step`. If no `step` is defined, the\ncurrent step will be determined automatically.\n\nThe form will be initialized using the `data` argument to prefill the\nnew form. If needed, instance or queryset (for `ModelForm` or\n`ModelFormSet`) will be added too.",
  "code": "def get_form(self, step=None, data=None, files=None):\n    \"\"\"\n    Constructs the form for a given `step`. If no `step` is defined, the\n    current step will be determined automatically.\n    The form will be initialized using the `data` argument to prefill the\n    new form. If needed, instance or queryset (for `ModelForm` or\n    `ModelFormSet`) will be added too.\n    \"\"\"\n    if step is None:\n        step = self.steps.current\n    # prepare the kwargs for the form instance.\n    kwargs = self.get_form_kwargs(step)\n    kwargs.update({\n        'data': data,\n        'files': files,\n        'prefix': self.get_form_prefix(step, self.form_list[step]),\n        'initial': self.get_form_initial(step),\n    })\n    if issubclass(self.form_list[step], forms.ModelForm):\n        # If the form is based on ModelForm, add instance if available\n        # and not previously set.\n        kwargs.setdefault('instance', self.get_form_instance(step))\n    elif issubclass(self.form_list[step], forms.models.BaseModelFormSet):\n        # If the form is based on ModelFormSet, add queryset if available\n        # and not previous set.\n        kwargs.setdefault('queryset', self.get_form_instance(step))\n    return self.form_list[step](**kwargs)\n",
  "kwargs": "self, step=None, data=None, files=None",
  "line_number": 368
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "get_form_initial",
  "docstring": "Returns a dictionary which will be passed to the form for `step`\nas `initial`. If no initial data was provied while initializing the\nform wizard, a empty dictionary will be returned.",
  "code": "def get_form_initial(self, step):\n    \"\"\"\n    Returns a dictionary which will be passed to the form for `step`\n    as `initial`. If no initial data was provied while initializing the\n    form wizard, a empty dictionary will be returned.\n    \"\"\"\n    return self.initial_dict.get(step, {})\n",
  "kwargs": "self, step",
  "line_number": 345
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "get_form_instance",
  "docstring": "Returns a object which will be passed to the form for `step`\nas `instance`. If no instance object was provied while initializing\nthe form wizard, None will be returned.",
  "code": "def get_form_instance(self, step):\n    \"\"\"\n    Returns a object which will be passed to the form for `step`\n    as `instance`. If no instance object was provied while initializing\n    the form wizard, None will be returned.\n    \"\"\"\n    return self.instance_dict.get(step, None)\n",
  "kwargs": "self, step",
  "line_number": 353
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "get_form_kwargs",
  "docstring": "Returns the keyword arguments for instantiating the form\n(or formset) on the given step.",
  "code": "def get_form_kwargs(self, step=None):\n    \"\"\"\n    Returns the keyword arguments for instantiating the form\n    (or formset) on the given step.\n    \"\"\"\n    return {}\n",
  "kwargs": "self, step=None",
  "line_number": 361
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "get_form_list",
  "docstring": "This method returns a form_list based on the initial form list but\nchecks if there is a condition method/value in the condition_list.\nIf an entry exists in the condition list, it will call/read the value\nand respect the result. (True means add the form, False means ignore\nthe form)\n\nThe form_list is always generated on the fly because condition methods\ncould use data from other (maybe previous forms).",
  "code": "def get_form_list(self):\n    \"\"\"\n    This method returns a form_list based on the initial form list but\n    checks if there is a condition method/value in the condition_list.\n    If an entry exists in the condition list, it will call/read the value\n    and respect the result. (True means add the form, False means ignore\n    the form)\n    The form_list is always generated on the fly because condition methods\n    could use data from other (maybe previous forms).\n    \"\"\"\n    form_list = SortedDict()\n    for form_key, form_class in self.form_list.iteritems():\n        # try to fetch the value from condition list, by default, the form\n        # gets passed to the new list.\n        condition = self.condition_dict.get(form_key, True)\n        if callable(condition):\n            # call the value if needed, passes the current instance.\n            condition = condition(self)\n        if condition:\n            form_list[form_key] = form_class\n    return form_list\n",
  "kwargs": "self",
  "line_number": 185
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "get_form_prefix",
  "docstring": "Returns the prefix which will be used when calling the actual form for\nthe given step. `step` contains the step-name, `form` the form which\nwill be called with the returned prefix.\n\nIf no step is given, the form_prefix will determine the current step\nautomatically.",
  "code": "def get_form_prefix(self, step=None, form=None):\n    \"\"\"\n    Returns the prefix which will be used when calling the actual form for\n    the given step. `step` contains the step-name, `form` the form which\n    will be called with the returned prefix.\n    If no step is given, the form_prefix will determine the current step\n    automatically.\n    \"\"\"\n    if step is None:\n        step = self.steps.current\n    return str(step)\n",
  "kwargs": "self, step=None, form=None",
  "line_number": 332
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "get_form_step_data",
  "docstring": "Is used to return the raw form data. You may use this method to\nmanipulate the data.",
  "code": "def get_form_step_data(self, form):\n    \"\"\"\n    Is used to return the raw form data. You may use this method to\n    manipulate the data.\n    \"\"\"\n    return form.data\n",
  "kwargs": "self, form",
  "line_number": 420
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "get_form_step_files",
  "docstring": "Is used to return the raw form files. You may use this method to\nmanipulate the data.",
  "code": "def get_form_step_files(self, form):\n    \"\"\"\n    Is used to return the raw form files. You may use this method to\n    manipulate the data.\n    \"\"\"\n    return form.files\n",
  "kwargs": "self, form",
  "line_number": 427
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "get_initkwargs",
  "docstring": "Creates a dict with all needed parameters for the form wizard instances.\n\n* `form_list` - is a list of forms. The list entries can be single form\n  classes or tuples of (`step_name`, `form_class`). If you pass a list\n  of forms, the wizardview will convert the class list to\n  (`zero_based_counter`, `form_class`). This is needed to access the\n  form for a specific step.\n* `initial_dict` - contains a dictionary of initial data dictionaries.\n  The key should be equal to the `step_name` in the `form_list` (or\n  the str of the zero based counter - if no step_names added in the\n  `form_list`)\n* `instance_dict` - contains a dictionary of instance objects. This\n  is only used when `ModelForm`s are used. The key should be equal to\n  the `step_name` in the `form_list`. Same rules as for `initial_dict`\n  apply.\n* `condition_dict` - contains a dictionary of boolean values or\n  callables. If the value of for a specific `step_name` is callable it\n  will be called with the wizardview instance as the only argument.\n  If the return value is true, the step's form will be used.",
  "code": "@classmethod\ndef get_initkwargs(cls, form_list, initial_dict=None,\n        instance_dict=None, condition_dict=None, *args, **kwargs):\n    \"\"\"\n    Creates a dict with all needed parameters for the form wizard instances.\n    * `form_list` - is a list of forms. The list entries can be single form\n      classes or tuples of (`step_name`, `form_class`). If you pass a list\n      of forms, the wizardview will convert the class list to\n      (`zero_based_counter`, `form_class`). This is needed to access the\n      form for a specific step.\n    * `initial_dict` - contains a dictionary of initial data dictionaries.\n      The key should be equal to the `step_name` in the `form_list` (or\n      the str of the zero based counter - if no step_names added in the\n      `form_list`)\n    * `instance_dict` - contains a dictionary of instance objects. This\n      is only used when `ModelForm`s are used. The key should be equal to\n      the `step_name` in the `form_list`. Same rules as for `initial_dict`\n      apply.\n    * `condition_dict` - contains a dictionary of boolean values or\n      callables. If the value of for a specific `step_name` is callable it\n      will be called with the wizardview instance as the only argument.\n      If the return value is true, the step's form will be used.\n    \"\"\"\n    kwargs.update({\n        'initial_dict': initial_dict or {},\n        'instance_dict': instance_dict or {},\n        'condition_dict': condition_dict or {},\n    })\n    init_form_list = SortedDict()\n    assert len(form_list) > 0, 'at least one form is needed'\n    # walk through the passed form list\n    for i, form in enumerate(form_list):\n        if isinstance(form, (list, tuple)):\n            # if the element is a tuple, add the tuple to the new created\n            # sorted dictionary.\n            init_form_list[unicode(form[0])] = form[1]\n        else:\n            # if not, add the form with a zero based counter as unicode\n            init_form_list[unicode(i)] = form\n    # walk through the new created list of forms\n    for form in init_form_list.itervalues():\n        if issubclass(form, formsets.BaseFormSet):\n            # if the element is based on BaseFormSet (FormSet/ModelFormSet)\n            # we need to override the form variable.\n            form = form.form\n        # check if any form contains a FileField, if yes, we need a\n        # file_storage added to the wizardview (by subclassing).\n        for field in form.base_fields.itervalues():\n            if (isinstance(field, forms.FileField) and\n                    not hasattr(cls, 'file_storage')):\n                raise NoFileStorageConfigured\n    # build the kwargs for the wizardview instances\n    kwargs['form_list'] = init_form_list\n    return kwargs\n",
  "kwargs": "cls, form_list, initial_dict=None, instance_dict=None, condition_dict=None, *args, **kwargs",
  "line_number": 121
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "get_next_step",
  "docstring": "Returns the next step after the given `step`. If no more steps are\navailable, None will be returned. If the `step` argument is None, the\ncurrent step will be determined automatically.",
  "code": "def get_next_step(self, step=None):\n    \"\"\"\n    Returns the next step after the given `step`. If no more steps are\n    available, None will be returned. If the `step` argument is None, the\n    current step will be determined automatically.\n    \"\"\"\n    if step is None:\n        step = self.steps.current\n    form_list = self.get_form_list()\n    key = form_list.keyOrder.index(step) + 1\n    if len(form_list.keyOrder) > key:\n        return form_list.keyOrder[key]\n    return None\n",
  "kwargs": "self, step=None",
  "line_number": 470
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "get_prefix",
  "docstring": "",
  "code": "def get_prefix(self, *args, **kwargs):\n    # TODO: Add some kind of unique id to prefix\n    return normalize_name(self.__class__.__name__)\n",
  "kwargs": "self, *args, **kwargs",
  "line_number": 181
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "get_prev_step",
  "docstring": "Returns the previous step before the given `step`. If there are no\nsteps available, None will be returned. If the `step` argument is\nNone, the current step will be determined automatically.",
  "code": "def get_prev_step(self, step=None):\n    \"\"\"\n    Returns the previous step before the given `step`. If there are no\n    steps available, None will be returned. If the `step` argument is\n    None, the current step will be determined automatically.\n    \"\"\"\n    if step is None:\n        step = self.steps.current\n    form_list = self.get_form_list()\n    key = form_list.keyOrder.index(step) - 1\n    if key >= 0:\n        return form_list.keyOrder[key]\n    return None\n",
  "kwargs": "self, step=None",
  "line_number": 484
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "get_step_index",
  "docstring": "Returns the index for the given `step` name. If no step is given,\nthe current step will be used to get the index.",
  "code": "def get_step_index(self, step=None):\n    \"\"\"\n    Returns the index for the given `step` name. If no step is given,\n    the current step will be used to get the index.\n    \"\"\"\n    if step is None:\n        step = self.steps.current\n    return self.get_form_list().keyOrder.index(step)\n",
  "kwargs": "self, step=None",
  "line_number": 498
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "post",
  "docstring": "This method handles POST requests.\n\nThe wizard will render either the current step (if form validation\nwasn't successful), the next step (if the current step was stored\nsuccessful) or the done view (if no more steps are available)",
  "code": "def post(self, *args, **kwargs):\n    \"\"\"\n    This method handles POST requests.\n    The wizard will render either the current step (if form validation\n    wasn't successful), the next step (if the current step was stored\n    successful) or the done view (if no more steps are available)\n    \"\"\"\n    # Look for a wizard_goto_step element in the posted data which\n    # contains a valid step name. If one was found, render the requested\n    # form. (This makes stepping back a lot easier).\n    wizard_goto_step = self.request.POST.get('wizard_goto_step', None)\n    if wizard_goto_step and wizard_goto_step in self.get_form_list():\n        self.storage.current_step = wizard_goto_step\n        form = self.get_form(\n            data=self.storage.get_step_data(self.steps.current),\n            files=self.storage.get_step_files(self.steps.current))\n        return self.render(form)\n    # Check if form was refreshed\n    management_form = ManagementForm(self.request.POST, prefix=self.prefix)\n    if not management_form.is_valid():\n        raise ValidationError(\n            'ManagementForm data is missing or has been tampered.')\n    form_current_step = management_form.cleaned_data['current_step']\n    if (form_current_step != self.steps.current and\n            self.storage.current_step is not None):\n        # form refreshed, change current step\n        self.storage.current_step = form_current_step\n    # get the form for the current step\n    form = self.get_form(data=self.request.POST, files=self.request.FILES)\n    # and try to validate\n    if form.is_valid():\n        # if the form is valid, store the cleaned data and files.\n        self.storage.set_step_data(self.steps.current, self.process_step(form))\n        self.storage.set_step_files(self.steps.current, self.process_step_files(form))\n        # check if the current step is the last step\n        if self.steps.current == self.steps.last:\n            # no more steps, render done view\n            return self.render_done(form, **kwargs)\n        else:\n            # proceed to the next step\n            return self.render_next_step(form)\n    return self.render(form)\n",
  "kwargs": "self, *args, **kwargs",
  "line_number": 243
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "process_step",
  "docstring": "This method is used to postprocess the form data. By default, it\nreturns the raw `form.data` dictionary.",
  "code": "def process_step(self, form):\n    \"\"\"\n    This method is used to postprocess the form data. By default, it\n    returns the raw `form.data` dictionary.\n    \"\"\"\n    return self.get_form_step_data(form)\n",
  "kwargs": "self, form",
  "line_number": 397
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "process_step_files",
  "docstring": "This method is used to postprocess the form files. By default, it\nreturns the raw `form.files` dictionary.",
  "code": "def process_step_files(self, form):\n    \"\"\"\n    This method is used to postprocess the form files. By default, it\n    returns the raw `form.files` dictionary.\n    \"\"\"\n    return self.get_form_step_files(form)\n",
  "kwargs": "self, form",
  "line_number": 404
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "render",
  "docstring": "Returns a ``HttpResponse`` containing all needed context data.",
  "code": "def render(self, form=None, **kwargs):\n    \"\"\"\n    Returns a ``HttpResponse`` containing all needed context data.\n    \"\"\"\n    form = form or self.get_form()\n    context = self.get_context_data(form=form, **kwargs)\n    return self.render_to_response(context)\n",
  "kwargs": "self, form=None, **kwargs",
  "line_number": 540
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "render_done",
  "docstring": "This method gets called when all forms passed. The method should also\nre-validate all steps to prevent manipulation. If any form don't\nvalidate, `render_revalidation_failure` should get called.\nIf everything is fine call `done`.",
  "code": "def render_done(self, form, **kwargs):\n    \"\"\"\n    This method gets called when all forms passed. The method should also\n    re-validate all steps to prevent manipulation. If any form don't\n    validate, `render_revalidation_failure` should get called.\n    If everything is fine call `done`.\n    \"\"\"\n    final_form_list = []\n    # walk through the form list and try to validate the data again.\n    for form_key in self.get_form_list():\n        form_obj = self.get_form(step=form_key,\n            data=self.storage.get_step_data(form_key),\n            files=self.storage.get_step_files(form_key))\n        if not form_obj.is_valid():\n            return self.render_revalidation_failure(form_key, form_obj, **kwargs)\n        final_form_list.append(form_obj)\n    # render the done view and reset the wizard before returning the\n    # response. This is needed to prevent from rendering done with the\n    # same data twice.\n    done_response = self.done(final_form_list, **kwargs)\n    self.storage.reset()\n    return done_response\n",
  "kwargs": "self, form, **kwargs",
  "line_number": 308
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "render_next_step",
  "docstring": "This method gets called when the next step/form should be rendered.\n`form` contains the last/current form.",
  "code": "def render_next_step(self, form, **kwargs):\n    \"\"\"\n    This method gets called when the next step/form should be rendered.\n    `form` contains the last/current form.\n    \"\"\"\n    # get the form instance based on the data from the storage backend\n    # (if available).\n    next_step = self.steps.next\n    new_form = self.get_form(next_step,\n        data=self.storage.get_step_data(next_step),\n        files=self.storage.get_step_files(next_step))\n    # change the stored current step\n    self.storage.current_step = next_step\n    return self.render(new_form, **kwargs)\n",
  "kwargs": "self, form, **kwargs",
  "line_number": 292
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "render_revalidation_failure",
  "docstring": "Gets called when a form doesn't validate when rendering the done\nview. By default, it changes the current step to failing forms step\nand renders the form.",
  "code": "def render_revalidation_failure(self, step, form, **kwargs):\n    \"\"\"\n    Gets called when a form doesn't validate when rendering the done\n    view. By default, it changes the current step to failing forms step\n    and renders the form.\n    \"\"\"\n    self.storage.current_step = step\n    return self.render(form, **kwargs)\n",
  "kwargs": "self, step, form, **kwargs",
  "line_number": 411
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "name": "__repr__",
  "docstring": "",
  "code": "def __repr__(self):\n    return '<%s: forms: %s>' % (self.__class__.__name__, self.form_list)\n",
  "kwargs": "self",
  "line_number": 108
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "delete",
  "docstring": "",
  "code": "def delete(self, request, *args, **kwargs):\n    return self.get(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 174
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "get",
  "docstring": "",
  "code": "def get(self, request, *args, **kwargs):\n    url = self.get_redirect_url(**kwargs)\n    if url:\n        if self.permanent:\n            return http.HttpResponsePermanentRedirect(url)\n        else:\n            return http.HttpResponseRedirect(url)\n    else:\n        logger.warning('Gone: %s', self.request.path,\n                    extra={\n                        'status_code': 410,\n                        'request': self.request\n                    })\n        return http.HttpResponseGone()\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 150
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "get_redirect_url",
  "docstring": "Return the URL redirect to. Keyword arguments from the\nURL pattern match generating the redirect request\nare provided as kwargs to this method.",
  "code": "def get_redirect_url(self, **kwargs):\n    \"\"\"\n    Return the URL redirect to. Keyword arguments from the\n    URL pattern match generating the redirect request\n    are provided as kwargs to this method.\n    \"\"\"\n    if self.url:\n        url = self.url % kwargs\n        args = self.request.META.get('QUERY_STRING', '')\n        if args and self.query_string:\n            url = \"%s?%s\" % (url, args)\n        return url\n    else:\n        return None\n",
  "kwargs": "self, **kwargs",
  "line_number": 135
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "head",
  "docstring": "",
  "code": "def head(self, request, *args, **kwargs):\n    return self.get(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 165
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "options",
  "docstring": "",
  "code": "def options(self, request, *args, **kwargs):\n    return self.get(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 171
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "post",
  "docstring": "",
  "code": "def post(self, request, *args, **kwargs):\n    return self.get(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 168
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "put",
  "docstring": "",
  "code": "def put(self, request, *args, **kwargs):\n    return self.get(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 177
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "get_template_names",
  "docstring": "Returns a list of template names to be used for the request. Must return\na list. May not be called if render_to_response is overridden.",
  "code": "def get_template_names(self):\n    \"\"\"\n    Returns a list of template names to be used for the request. Must return\n    a list. May not be called if render_to_response is overridden.\n    \"\"\"\n    if self.template_name is None:\n        raise ImproperlyConfigured(\n            \"TemplateResponseMixin requires either a definition of \"\n            \"'template_name' or an implementation of 'get_template_names()'\")\n    else:\n        return [self.template_name]\n",
  "kwargs": "self",
  "line_number": 100
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "render_to_response",
  "docstring": "Returns a response with a template rendered with the given context.",
  "code": "def render_to_response(self, context, **response_kwargs):\n    \"\"\"\n    Returns a response with a template rendered with the given context.\n    \"\"\"\n    return self.response_class(\n        request = self.request,\n        template = self.get_template_names(),\n        context = context,\n        **response_kwargs\n    )\n",
  "kwargs": "self, context, **response_kwargs",
  "line_number": 89
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "TemplateView",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "get",
  "docstring": "",
  "code": "def get(self, request, *args, **kwargs):\n    context = self.get_context_data(**kwargs)\n    return self.render_to_response(context)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 122
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "TemplateView",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "get_context_data",
  "docstring": "",
  "code": "def get_context_data(self, **kwargs):\n    return {\n        'params': kwargs\n    }\n",
  "kwargs": "self, **kwargs",
  "line_number": 117
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "as_view",
  "docstring": "Main entry point for a request-response process.",
  "code": "@classonlymethod\ndef as_view(cls, **initkwargs):\n    \"\"\"\n    Main entry point for a request-response process.\n    \"\"\"\n    # sanitize keyword arguments\n    for key in initkwargs:\n        if key in cls.http_method_names:\n            raise TypeError(u\"You tried to pass in the %s method name as a \"\n                            u\"keyword argument to %s(). Don't do that.\"\n                            % (key, cls.__name__))\n        if not hasattr(cls, key):\n            raise TypeError(u\"%s() received an invalid keyword %r\" % (\n                cls.__name__, key))\n    def view(request, *args, **kwargs):\n        self = cls(**initkwargs)\n        if hasattr(self, 'get') and not hasattr(self, 'head'):\n            self.head = self.get\n        return self.dispatch(request, *args, **kwargs)\n    # take name and docstring from class\n    update_wrapper(view, cls, updated=())\n    # and possible attributes set by decorators\n    # like csrf_exempt from dispatch\n    update_wrapper(view, cls.dispatch, assigned=())\n    return view\n",
  "kwargs": "cls, **initkwargs",
  "line_number": 29
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "dispatch",
  "docstring": "",
  "code": "def dispatch(self, request, *args, **kwargs):\n    # Try to dispatch to the right method; if a method doesn't exist,\n    # defer to the error handler. Also defer to the error handler if the\n    # request method isn't on the approved list.\n    if request.method.lower() in self.http_method_names:\n        handler = getattr(self, request.method.lower(), self.http_method_not_allowed)\n    else:\n        handler = self.http_method_not_allowed\n    self.request = request\n    self.args = args\n    self.kwargs = kwargs\n    return handler(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 58
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "http_method_not_allowed",
  "docstring": "",
  "code": "def http_method_not_allowed(self, request, *args, **kwargs):\n    allowed_methods = [m for m in self.http_method_names if hasattr(self, m)]\n    logger.warning('Method Not Allowed (%s): %s', request.method, request.path,\n        extra={\n            'status_code': 405,\n            'request': self.request\n        }\n    )\n    return http.HttpResponseNotAllowed(allowed_methods)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 71
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "name": "__init__",
  "docstring": "Constructor. Called in the URLconf; can contain helpful extra\nkeyword arguments, and other things.",
  "code": "def __init__(self, **kwargs):\n    \"\"\"\n    Constructor. Called in the URLconf; can contain helpful extra\n    keyword arguments, and other things.\n    \"\"\"\n    # Go through keyword arguments, and either save their values to our\n    # instance, or raise an error.\n    for key, value in kwargs.iteritems():\n        setattr(self, key, value)\n",
  "kwargs": "self, **kwargs",
  "line_number": 19
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseArchiveIndexView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_dated_items",
  "docstring": "Return (date_list, items, extra_context) for this request.",
  "code": "def get_dated_items(self):\n    \"\"\"\n    Return (date_list, items, extra_context) for this request.\n    \"\"\"\n    qs = self.get_dated_queryset()\n    date_list = self.get_date_list(qs, 'year')\n    if date_list:\n        object_list = qs.order_by('-' + self.get_date_field())\n    else:\n        object_list = qs.none()\n    return (date_list, object_list, {})\n",
  "kwargs": "self",
  "line_number": 238
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseDateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_object",
  "docstring": "Get the object this request displays.",
  "code": "def get_object(self, queryset=None):\n    \"\"\"\n    Get the object this request displays.\n    \"\"\"\n    year = self.get_year()\n    month = self.get_month()\n    day = self.get_day()\n    date = _date_from_string(year, self.get_year_format(),\n                             month, self.get_month_format(),\n                             day, self.get_day_format())\n    # Use a custom queryset if provided\n    qs = queryset or self.get_queryset()\n    if not self.get_allow_future() and date > datetime.date.today():\n        raise Http404(_(u\"Future %(verbose_name_plural)s not available because %(class_name)s.allow_future is False.\") % {\n            'verbose_name_plural': qs.model._meta.verbose_name_plural,\n            'class_name': self.__class__.__name__,\n        })\n    # Filter down a queryset from self.queryset using the date from the\n    # URL. This'll get passed as the queryset to DetailView.get_object,\n    # which'll handle the 404\n    date_field = self.get_date_field()\n    field = qs.model._meta.get_field(date_field)\n    lookup = _date_lookup_for_field(field, date)\n    qs = qs.filter(**lookup)\n    return super(BaseDetailView, self).get_object(queryset=qs)\n",
  "kwargs": "self, queryset=None",
  "line_number": 452
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get",
  "docstring": "",
  "code": "def get(self, request, *args, **kwargs):\n    self.date_list, self.object_list, extra_context = self.get_dated_items()\n    context = self.get_context_data(object_list=self.object_list,\n                                    date_list=self.date_list)\n    context.update(extra_context)\n    return self.render_to_response(context)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 171
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_context_data",
  "docstring": "Get the context. Must return a Context (or subclass) instance.",
  "code": "def get_context_data(self, **kwargs):\n    \"\"\"\n    Get the context. Must return a Context (or subclass) instance.\n    \"\"\"\n    items = kwargs.pop('object_list')\n    context = super(BaseDateListView, self).get_context_data(object_list=items)\n    context.update(kwargs)\n    return context\n",
  "kwargs": "self, **kwargs",
  "line_number": 220
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_dated_items",
  "docstring": "Obtain the list of dates and itesm",
  "code": "def get_dated_items(self):\n    \"\"\"\n    Obtain the list of dates and itesm\n    \"\"\"\n    raise NotImplementedError('A DateView must provide an implementation of get_dated_items()')\n",
  "kwargs": "self",
  "line_number": 178
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_dated_queryset",
  "docstring": "Get a queryset properly filtered according to `allow_future` and any\nextra lookup kwargs.",
  "code": "def get_dated_queryset(self, **lookup):\n    \"\"\"\n    Get a queryset properly filtered according to `allow_future` and any\n    extra lookup kwargs.\n    \"\"\"\n    qs = self.get_queryset().filter(**lookup)\n    date_field = self.get_date_field()\n    allow_future = self.get_allow_future()\n    allow_empty = self.get_allow_empty()\n    if not allow_future:\n        qs = qs.filter(**{'%s__lte' % date_field: timezone.now()})\n    if not allow_empty and not qs:\n        raise Http404(_(u\"No %(verbose_name_plural)s available\") % {\n                'verbose_name_plural': force_unicode(qs.model._meta.verbose_name_plural)\n        })\n    return qs\n",
  "kwargs": "self, **lookup",
  "line_number": 184
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_date_list",
  "docstring": "Get a date list by calling `queryset.dates()`, checking along the way\nfor empty lists that aren't allowed.",
  "code": "def get_date_list(self, queryset, date_type):\n    \"\"\"\n    Get a date list by calling `queryset.dates()`, checking along the way\n    for empty lists that aren't allowed.\n    \"\"\"\n    date_field = self.get_date_field()\n    allow_empty = self.get_allow_empty()\n    date_list = queryset.dates(date_field, date_type)[::-1]\n    if date_list is not None and not date_list and not allow_empty:\n        name = force_unicode(queryset.model._meta.verbose_name_plural)\n        raise Http404(_(u\"No %(verbose_name_plural)s available\") %\n                      {'verbose_name_plural': name})\n    return date_list\n",
  "kwargs": "self, queryset, date_type",
  "line_number": 204
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseDayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "_get_dated_items",
  "docstring": "Do the actual heavy lifting of getting the dated items; this accepts a\ndate object so that TodayArchiveView can be trivial.",
  "code": "def _get_dated_items(self, date):\n    \"\"\"\n    Do the actual heavy lifting of getting the dated items; this accepts a\n    date object so that TodayArchiveView can be trivial.\n    \"\"\"\n    date_field = self.get_date_field()\n    field = self.get_queryset().model._meta.get_field(date_field)\n    lookup_kwargs = _date_lookup_for_field(field, date)\n    qs = self.get_dated_queryset(**lookup_kwargs)\n    return (None, qs, {\n        'day': date,\n        'previous_day': self.get_previous_day(date),\n        'next_day': self.get_next_day(date),\n        'previous_month': self.get_previous_month(date),\n        'next_month': self.get_next_month(date)\n    })\n",
  "kwargs": "self, date",
  "line_number": 400
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseDayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_dated_items",
  "docstring": "Return (date_list, items, extra_context) for this request.",
  "code": "def get_dated_items(self):\n    \"\"\"\n    Return (date_list, items, extra_context) for this request.\n    \"\"\"\n    year = self.get_year()\n    month = self.get_month()\n    day = self.get_day()\n    date = _date_from_string(year, self.get_year_format(),\n                             month, self.get_month_format(),\n                             day, self.get_day_format())\n    return self._get_dated_items(date)\n",
  "kwargs": "self",
  "line_number": 386
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseMonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_dated_items",
  "docstring": "Return (date_list, items, extra_context) for this request.",
  "code": "def get_dated_items(self):\n    \"\"\"\n    Return (date_list, items, extra_context) for this request.\n    \"\"\"\n    year = self.get_year()\n    month = self.get_month()\n    date_field = self.get_date_field()\n    date = _date_from_string(year, self.get_year_format(),\n                             month, self.get_month_format())\n    # Construct a date-range lookup.\n    first_day, last_day = _month_bounds(date)\n    lookup_kwargs = {\n        '%s__gte' % date_field: first_day,\n        '%s__lt' % date_field: last_day,\n    }\n    qs = self.get_dated_queryset(**lookup_kwargs)\n    date_list = self.get_date_list(qs, 'day')\n    return (date_list, qs, {\n        'month': date,\n        'next_month': self.get_next_month(date),\n        'previous_month': self.get_previous_month(date),\n    })\n",
  "kwargs": "self",
  "line_number": 305
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseTodayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_dated_items",
  "docstring": "Return (date_list, items, extra_context) for this request.",
  "code": "def get_dated_items(self):\n    \"\"\"\n    Return (date_list, items, extra_context) for this request.\n    \"\"\"\n    return self._get_dated_items(datetime.date.today())\n",
  "kwargs": "self",
  "line_number": 433
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseWeekArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_dated_items",
  "docstring": "Return (date_list, items, extra_context) for this request.",
  "code": "def get_dated_items(self):\n    \"\"\"\n    Return (date_list, items, extra_context) for this request.\n    \"\"\"\n    year = self.get_year()\n    week = self.get_week()\n    date_field = self.get_date_field()\n    week_format = self.get_week_format()\n    week_start = {\n        '%W': '1',\n        '%U': '0',\n    }[week_format]\n    date = _date_from_string(year, self.get_year_format(),\n                             week_start, '%w',\n                             week, week_format)\n    # Construct a date-range lookup.\n    first_day = date\n    last_day = date + datetime.timedelta(days=7)\n    lookup_kwargs = {\n        '%s__gte' % date_field: first_day,\n        '%s__lt' % date_field: last_day,\n    }\n    qs = self.get_dated_queryset(**lookup_kwargs)\n    return (None, qs, {'week': date})\n",
  "kwargs": "self",
  "line_number": 345
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseYearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_dated_items",
  "docstring": "Return (date_list, items, extra_context) for this request.",
  "code": "def get_dated_items(self):\n    \"\"\"\n    Return (date_list, items, extra_context) for this request.\n    \"\"\"\n    # Yes, no error checking: the URLpattern ought to validate this; it's\n    # an error if it doesn't.\n    year = self.get_year()\n    date_field = self.get_date_field()\n    qs = self.get_dated_queryset(**{date_field+'__year': year})\n    date_list = self.get_date_list(qs, 'month')\n    if self.get_make_object_list():\n        object_list = qs.order_by('-'+date_field)\n    else:\n        # We need this to be a queryset since parent classes introspect it\n        # to find information about the model.\n        object_list = qs.none()\n    return (date_list, object_list, {'year': year})\n",
  "kwargs": "self",
  "line_number": 266
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseYearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_make_object_list",
  "docstring": "Return `True` if this view should contain the full list of objects in\nthe given year.",
  "code": "def get_make_object_list(self):\n    \"\"\"\n    Return `True` if this view should contain the full list of objects in\n    the given year.\n    \"\"\"\n    return self.make_object_list\n",
  "kwargs": "self",
  "line_number": 286
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "DateMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_allow_future",
  "docstring": "Returns `True` if the view should be allowed to display objects from\nthe future.",
  "code": "def get_allow_future(self):\n    \"\"\"\n    Returns `True` if the view should be allowed to display objects from\n    the future.\n    \"\"\"\n    return self.allow_future\n",
  "kwargs": "self",
  "line_number": 157
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "DateMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_date_field",
  "docstring": "Get the name of the date field to be used to filter by.",
  "code": "def get_date_field(self):\n    \"\"\"\n    Get the name of the date field to be used to filter by.\n    \"\"\"\n    if self.date_field is None:\n        raise ImproperlyConfigured(u\"%s.date_field is required.\" % self.__class__.__name__)\n    return self.date_field\n",
  "kwargs": "self",
  "line_number": 149
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_day",
  "docstring": "Return the day for which this view should display data",
  "code": "def get_day(self):\n    \"Return the day for which this view should display data\"\n    day = self.day\n    if day is None:\n        try:\n            day = self.kwargs['day']\n        except KeyError:\n            try:\n                day = self.request.GET['day']\n            except KeyError:\n                raise Http404(_(u\"No day specified\"))\n    return day\n",
  "kwargs": "self",
  "line_number": 89
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_day_format",
  "docstring": "Get a day format string in strptime syntax to be used to parse the day\nfrom url variables.",
  "code": "def get_day_format(self):\n    \"\"\"\n    Get a day format string in strptime syntax to be used to parse the day\n    from url variables.\n    \"\"\"\n    return self.day_format\n",
  "kwargs": "self",
  "line_number": 82
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_next_day",
  "docstring": "Get the next valid day.",
  "code": "def get_next_day(self, date):\n    \"\"\"\n    Get the next valid day.\n    \"\"\"\n    next = date + datetime.timedelta(days=1)\n    return _get_next_prev_month(self, next, is_previous=False, use_first_day=False)\n",
  "kwargs": "self, date",
  "line_number": 102
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_previous_day",
  "docstring": "Get the previous valid day.",
  "code": "def get_previous_day(self, date):\n    \"\"\"\n    Get the previous valid day.\n    \"\"\"\n    prev = date - datetime.timedelta(days=1)\n    return _get_next_prev_month(self, prev, is_previous=True, use_first_day=False)\n",
  "kwargs": "self, date",
  "line_number": 109
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_month",
  "docstring": "Return the month for which this view should display data",
  "code": "def get_month(self):\n    \"Return the month for which this view should display data\"\n    month = self.month\n    if month is None:\n        try:\n            month = self.kwargs['month']\n        except KeyError:\n            try:\n                month = self.request.GET['month']\n            except KeyError:\n                raise Http404(_(u\"No month specified\"))\n    return month\n",
  "kwargs": "self",
  "line_number": 48
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_month_format",
  "docstring": "Get a month format string in strptime syntax to be used to parse the\nmonth from url variables.",
  "code": "def get_month_format(self):\n    \"\"\"\n    Get a month format string in strptime syntax to be used to parse the\n    month from url variables.\n    \"\"\"\n    return self.month_format\n",
  "kwargs": "self",
  "line_number": 41
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_next_month",
  "docstring": "Get the next valid month.",
  "code": "def get_next_month(self, date):\n    \"\"\"\n    Get the next valid month.\n    \"\"\"\n    first_day, last_day = _month_bounds(date)\n    next = (last_day + datetime.timedelta(days=1)).replace(day=1)\n    return _get_next_prev_month(self, next, is_previous=False, use_first_day=True)\n",
  "kwargs": "self, date",
  "line_number": 61
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_previous_month",
  "docstring": "Get the previous valid month.",
  "code": "def get_previous_month(self, date):\n    \"\"\"\n    Get the previous valid month.\n    \"\"\"\n    first_day, last_day = _month_bounds(date)\n    prev = (first_day - datetime.timedelta(days=1))\n    return _get_next_prev_month(self, prev, is_previous=True, use_first_day=True)\n",
  "kwargs": "self, date",
  "line_number": 69
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_week",
  "docstring": "Return the week for which this view should display data",
  "code": "def get_week(self):\n    \"Return the week for which this view should display data\"\n    week = self.week\n    if week is None:\n        try:\n            week = self.kwargs['week']\n        except KeyError:\n            try:\n                week = self.request.GET['week']\n            except KeyError:\n                raise Http404(_(u\"No week specified\"))\n    return week\n",
  "kwargs": "self",
  "line_number": 128
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_week_format",
  "docstring": "Get a week format string in strptime syntax to be used to parse the\nweek from url variables.",
  "code": "def get_week_format(self):\n    \"\"\"\n    Get a week format string in strptime syntax to be used to parse the\n    week from url variables.\n    \"\"\"\n    return self.week_format\n",
  "kwargs": "self",
  "line_number": 121
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_year",
  "docstring": "Return the year for which this view should display data",
  "code": "def get_year(self):\n    \"Return the year for which this view should display data\"\n    year = self.year\n    if year is None:\n        try:\n            year = self.kwargs['year']\n        except KeyError:\n            try:\n                year = self.request.GET['year']\n            except KeyError:\n                raise Http404(_(u\"No year specified\"))\n    return year\n",
  "kwargs": "self",
  "line_number": 23
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "name": "get_year_format",
  "docstring": "Get a year format string in strptime syntax to be used to parse the\nyear from url variables.",
  "code": "def get_year_format(self):\n    \"\"\"\n    Get a year format string in strptime syntax to be used to parse the\n    year from url variables.\n    \"\"\"\n    return self.year_format\n",
  "kwargs": "self",
  "line_number": 16
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseDetailView",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "name": "get",
  "docstring": "",
  "code": "def get(self, request, *args, **kwargs):\n    self.object = self.get_object()\n    context = self.get_context_data(object=self.object)\n    return self.render_to_response(context)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 97
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "name": "get_context_data",
  "docstring": "",
  "code": "def get_context_data(self, **kwargs):\n    context = kwargs\n    context_object_name = self.get_context_object_name(self.object)\n    if context_object_name:\n        context[context_object_name] = self.object\n    return context\n",
  "kwargs": "self, **kwargs",
  "line_number": 88
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "name": "get_context_object_name",
  "docstring": "Get the name to use for the object.",
  "code": "def get_context_object_name(self, obj):\n    \"\"\"\n    Get the name to use for the object.\n    \"\"\"\n    if self.context_object_name:\n        return self.context_object_name\n    elif hasattr(obj, '_meta'):\n        return smart_str(obj._meta.object_name.lower())\n    else:\n        return None\n",
  "kwargs": "self, obj",
  "line_number": 77
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "name": "get_object",
  "docstring": "Returns the object the view is displaying.\n\nBy default this requires `self.queryset` and a `pk` or `slug` argument\nin the URLconf, but subclasses can override this to return any object.",
  "code": "def get_object(self, queryset=None):\n    \"\"\"\n    Returns the object the view is displaying.\n    By default this requires `self.queryset` and a `pk` or `slug` argument\n    in the URLconf, but subclasses can override this to return any object.\n    \"\"\"\n    # Use a custom queryset if provided; this is required for subclasses\n    # like DateDetailView\n    if queryset is None:\n        queryset = self.get_queryset()\n    # Next, try looking up by primary key.\n    pk = self.kwargs.get(self.pk_url_kwarg, None)\n    slug = self.kwargs.get(self.slug_url_kwarg, None)\n    if pk is not None:\n        queryset = queryset.filter(pk=pk)\n    # Next, try looking up by slug.\n    elif slug is not None:\n        slug_field = self.get_slug_field()\n        queryset = queryset.filter(**{slug_field: slug})\n    # If none of those are defined, it's an error.\n    else:\n        raise AttributeError(u\"Generic detail view %s must be called with \"\n                             u\"either an object pk or a slug.\"\n                             % self.__class__.__name__)\n    try:\n        obj = queryset.get()\n    except ObjectDoesNotExist:\n        raise Http404(_(u\"No %(verbose_name)s found matching the query\") %\n                      {'verbose_name': queryset.model._meta.verbose_name})\n    return obj\n",
  "kwargs": "self, queryset=None",
  "line_number": 19
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "name": "get_queryset",
  "docstring": "Get the queryset to look an object up against. May not be called if\n`get_object` is overridden.",
  "code": "def get_queryset(self):\n    \"\"\"\n    Get the queryset to look an object up against. May not be called if\n    `get_object` is overridden.\n    \"\"\"\n    if self.queryset is None:\n        if self.model:\n            return self.model._default_manager.all()\n        else:\n            raise ImproperlyConfigured(u\"%(cls)s is missing a queryset. Define \"\n                                       u\"%(cls)s.model, %(cls)s.queryset, or override \"\n                                       u\"%(cls)s.get_object().\" % {\n                                            'cls': self.__class__.__name__\n                                    })\n    return self.queryset._clone()\n",
  "kwargs": "self",
  "line_number": 55
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "name": "get_slug_field",
  "docstring": "Get the name of a slug field to be used to look up by slug.",
  "code": "def get_slug_field(self):\n    \"\"\"\n    Get the name of a slug field to be used to look up by slug.\n    \"\"\"\n    return self.slug_field\n",
  "kwargs": "self",
  "line_number": 71
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "name": "get_template_names",
  "docstring": "Return a list of template names to be used for the request. Must return\na list. May not be called if get_template is overridden.",
  "code": "def get_template_names(self):\n    \"\"\"\n    Return a list of template names to be used for the request. Must return\n    a list. May not be called if get_template is overridden.\n    \"\"\"\n    try:\n        names = super(SingleObjectTemplateResponseMixin, self).get_template_names()\n    except ImproperlyConfigured:\n        # If template_name isn't specified, it's not a problem --\n        # we just start with an empty list.\n        names = []\n    # If self.template_name_field is set, grab the value of the field\n    # of that name from the object; this is the most specific template\n    # name, if given.\n    if self.object and self.template_name_field:\n        name = getattr(self.object, self.template_name_field, None)\n        if name:\n            names.insert(0, name)\n    # The least-specific option is the default <app>/<model>_detail.html;\n    # only use this if the object in question is a model.\n    if hasattr(self.object, '_meta'):\n        names.append(\"%s/%s%s.html\" % (\n            self.object._meta.app_label,\n            self.object._meta.object_name.lower(),\n            self.template_name_suffix\n        ))\n    elif hasattr(self, 'model') and hasattr(self.model, '_meta'):\n        names.append(\"%s/%s%s.html\" % (\n            self.model._meta.app_label,\n            self.model._meta.object_name.lower(),\n            self.template_name_suffix\n        ))\n    return names\n",
  "kwargs": "self",
  "line_number": 107
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseCreateView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "get",
  "docstring": "",
  "code": "def get(self, request, *args, **kwargs):\n    self.object = None\n    return super(BaseCreateView, self).get(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 166
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseCreateView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "post",
  "docstring": "",
  "code": "def post(self, request, *args, **kwargs):\n    self.object = None\n    return super(BaseCreateView, self).post(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 170
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseUpdateView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "get",
  "docstring": "",
  "code": "def get(self, request, *args, **kwargs):\n    self.object = self.get_object()\n    return super(BaseUpdateView, self).get(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 189
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseUpdateView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "post",
  "docstring": "",
  "code": "def post(self, request, *args, **kwargs):\n    self.object = self.get_object()\n    return super(BaseUpdateView, self).post(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 193
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "DeletionMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "delete",
  "docstring": "",
  "code": "def delete(self, request, *args, **kwargs):\n    self.object = self.get_object()\n    self.object.delete()\n    return HttpResponseRedirect(self.get_success_url())\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 212
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "DeletionMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "get_success_url",
  "docstring": "",
  "code": "def get_success_url(self):\n    if self.success_url:\n        return self.success_url\n    else:\n        raise ImproperlyConfigured(\n            \"No URL to redirect to. Provide a success_url.\")\n",
  "kwargs": "self",
  "line_number": 221
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "DeletionMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "post",
  "docstring": "",
  "code": "def post(self, *args, **kwargs):\n    return self.delete(*args, **kwargs)\n",
  "kwargs": "self, *args, **kwargs",
  "line_number": 218
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "form_invalid",
  "docstring": "",
  "code": "def form_invalid(self, form):\n    return self.render_to_response(self.get_context_data(form=form))\n",
  "kwargs": "self, form",
  "line_number": 62
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "form_valid",
  "docstring": "",
  "code": "def form_valid(self, form):\n    return HttpResponseRedirect(self.get_success_url())\n",
  "kwargs": "self, form",
  "line_number": 59
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "get_context_data",
  "docstring": "",
  "code": "def get_context_data(self, **kwargs):\n    return kwargs\n",
  "kwargs": "self, **kwargs",
  "line_number": 48
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "get_form",
  "docstring": "Returns an instance of the form to be used in this view.",
  "code": "def get_form(self, form_class):\n    \"\"\"\n    Returns an instance of the form to be used in this view.\n    \"\"\"\n    return form_class(**self.get_form_kwargs())\n",
  "kwargs": "self, form_class",
  "line_number": 30
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "get_form_class",
  "docstring": "Returns the form class to use in this view",
  "code": "def get_form_class(self):\n    \"\"\"\n    Returns the form class to use in this view\n    \"\"\"\n    return self.form_class\n",
  "kwargs": "self",
  "line_number": 24
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "get_form_kwargs",
  "docstring": "Returns the keyword arguments for instanciating the form.",
  "code": "def get_form_kwargs(self):\n    \"\"\"\n    Returns the keyword arguments for instanciating the form.\n    \"\"\"\n    kwargs = {'initial': self.get_initial()}\n    if self.request.method in ('POST', 'PUT'):\n        kwargs.update({\n            'data': self.request.POST,\n            'files': self.request.FILES,\n        })\n    return kwargs\n",
  "kwargs": "self",
  "line_number": 36
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "get_initial",
  "docstring": "Returns the initial data to use for forms on this view.",
  "code": "def get_initial(self):\n    \"\"\"\n    Returns the initial data to use for forms on this view.\n    \"\"\"\n    return self.initial.copy()\n",
  "kwargs": "self",
  "line_number": 18
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "get_success_url",
  "docstring": "",
  "code": "def get_success_url(self):\n    if self.success_url:\n        url = self.success_url\n    else:\n        raise ImproperlyConfigured(\n            \"No URL to redirect to. Provide a success_url.\")\n    return url\n",
  "kwargs": "self",
  "line_number": 51
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "form_valid",
  "docstring": "",
  "code": "def form_valid(self, form):\n    self.object = form.save()\n    return super(ModelFormMixin, self).form_valid(form)\n",
  "kwargs": "self, form",
  "line_number": 111
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "get_context_data",
  "docstring": "",
  "code": "def get_context_data(self, **kwargs):\n    context = kwargs\n    if self.object:\n        context['object'] = self.object\n        context_object_name = self.get_context_object_name(self.object)\n        if context_object_name:\n            context[context_object_name] = self.object\n    return context\n",
  "kwargs": "self, **kwargs",
  "line_number": 115
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "get_form_class",
  "docstring": "Returns the form class to use in this view",
  "code": "def get_form_class(self):\n    \"\"\"\n    Returns the form class to use in this view\n    \"\"\"\n    if self.form_class:\n        return self.form_class\n    else:\n        if self.model is not None:\n            # If a model has been explicitly provided, use it\n            model = self.model\n        elif hasattr(self, 'object') and self.object is not None:\n            # If this view is operating on a single object, use\n            # the class of that object\n            model = self.object.__class__\n        else:\n            # Try to get a queryset and extract the model class\n            # from that\n            model = self.get_queryset().model\n        return model_forms.modelform_factory(model)\n",
  "kwargs": "self",
  "line_number": 71
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "get_form_kwargs",
  "docstring": "Returns the keyword arguments for instanciating the form.",
  "code": "def get_form_kwargs(self):\n    \"\"\"\n    Returns the keyword arguments for instanciating the form.\n    \"\"\"\n    kwargs = super(ModelFormMixin, self).get_form_kwargs()\n    kwargs.update({'instance': self.object})\n    return kwargs\n",
  "kwargs": "self",
  "line_number": 91
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "get_success_url",
  "docstring": "",
  "code": "def get_success_url(self):\n    if self.success_url:\n        url = self.success_url % self.object.__dict__\n    else:\n        try:\n            url = self.object.get_absolute_url()\n        except AttributeError:\n            raise ImproperlyConfigured(\n                \"No URL to redirect to.  Either provide a url or define\"\n                \" a get_absolute_url method on the Model.\")\n    return url\n",
  "kwargs": "self",
  "line_number": 99
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "ProcessFormView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "get",
  "docstring": "",
  "code": "def get(self, request, *args, **kwargs):\n    form_class = self.get_form_class()\n    form = self.get_form(form_class)\n    return self.render_to_response(self.get_context_data(form=form))\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 129
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "ProcessFormView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "post",
  "docstring": "",
  "code": "def post(self, request, *args, **kwargs):\n    form_class = self.get_form_class()\n    form = self.get_form(form_class)\n    if form.is_valid():\n        return self.form_valid(form)\n    else:\n        return self.form_invalid(form)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 134
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "ProcessFormView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "name": "put",
  "docstring": "",
  "code": "def put(self, *args, **kwargs):\n    return self.post(*args, **kwargs)\n",
  "kwargs": "self, *args, **kwargs",
  "line_number": 144
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseListView",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "name": "get",
  "docstring": "",
  "code": "def get(self, request, *args, **kwargs):\n    self.object_list = self.get_queryset()\n    allow_empty = self.get_allow_empty()\n    if not allow_empty and len(self.object_list) == 0:\n        raise Http404(_(u\"Empty list and '%(class_name)s.allow_empty' is False.\")\n                      % {'class_name': self.__class__.__name__})\n    context = self.get_context_data(object_list=self.object_list)\n    return self.render_to_response(context)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 113
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "name": "get_allow_empty",
  "docstring": "Returns ``True`` if the view should display empty lists, and ``False``\nif a 404 should be raised instead.",
  "code": "def get_allow_empty(self):\n    \"\"\"\n    Returns ``True`` if the view should display empty lists, and ``False``\n    if a 404 should be raised instead.\n    \"\"\"\n    return self.allow_empty\n",
  "kwargs": "self",
  "line_number": 66
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "name": "get_context_data",
  "docstring": "Get the context for this view.",
  "code": "def get_context_data(self, **kwargs):\n    \"\"\"\n    Get the context for this view.\n    \"\"\"\n    queryset = kwargs.pop('object_list')\n    page_size = self.get_paginate_by(queryset)\n    context_object_name = self.get_context_object_name(queryset)\n    if page_size:\n        paginator, page, queryset, is_paginated = self.paginate_queryset(queryset, page_size)\n        context = {\n            'paginator': paginator,\n            'page_obj': page,\n            'is_paginated': is_paginated,\n            'object_list': queryset\n        }\n    else:\n        context = {\n            'paginator': None,\n            'page_obj': None,\n            'is_paginated': False,\n            'object_list': queryset\n        }\n    context.update(kwargs)\n    if context_object_name is not None:\n        context[context_object_name] = queryset\n    return context\n",
  "kwargs": "self, **kwargs",
  "line_number": 84
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "name": "get_context_object_name",
  "docstring": "Get the name of the item to be used in the context.",
  "code": "def get_context_object_name(self, object_list):\n    \"\"\"\n    Get the name of the item to be used in the context.\n    \"\"\"\n    if self.context_object_name:\n        return self.context_object_name\n    elif hasattr(object_list, 'model'):\n        return smart_str('%s_list' % object_list.model._meta.object_name.lower())\n    else:\n        return None\n",
  "kwargs": "self, object_list",
  "line_number": 73
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "name": "get_paginate_by",
  "docstring": "Get the number of items to paginate by, or ``None`` for no pagination.",
  "code": "def get_paginate_by(self, queryset):\n    \"\"\"\n    Get the number of items to paginate by, or ``None`` for no pagination.\n    \"\"\"\n    return self.paginate_by\n",
  "kwargs": "self, queryset",
  "line_number": 54
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "name": "get_paginator",
  "docstring": "Return an instance of the paginator for this view.",
  "code": "def get_paginator(self, queryset, per_page, orphans=0, allow_empty_first_page=True):\n    \"\"\"\n    Return an instance of the paginator for this view.\n    \"\"\"\n    return self.paginator_class(queryset, per_page, orphans=orphans, allow_empty_first_page=allow_empty_first_page)\n",
  "kwargs": "self, queryset, per_page, orphans=0, allow_empty_first_page=True",
  "line_number": 60
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "name": "get_queryset",
  "docstring": "Get the list of items for this view. This must be an interable, and may\nbe a queryset (in which qs-specific behavior will be enabled).",
  "code": "def get_queryset(self):\n    \"\"\"\n    Get the list of items for this view. This must be an interable, and may\n    be a queryset (in which qs-specific behavior will be enabled).\n    \"\"\"\n    if self.queryset is not None:\n        queryset = self.queryset\n        if hasattr(queryset, '_clone'):\n            queryset = queryset._clone()\n    elif self.model is not None:\n        queryset = self.model._default_manager.all()\n    else:\n        raise ImproperlyConfigured(u\"'%s' must define 'queryset' or 'model'\"\n                                   % self.__class__.__name__)\n    return queryset\n",
  "kwargs": "self",
  "line_number": 17
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "name": "paginate_queryset",
  "docstring": "Paginate the queryset, if needed.",
  "code": "def paginate_queryset(self, queryset, page_size):\n    \"\"\"\n    Paginate the queryset, if needed.\n    \"\"\"\n    paginator = self.get_paginator(queryset, page_size, allow_empty_first_page=self.get_allow_empty())\n    page = self.kwargs.get('page') or self.request.GET.get('page') or 1\n    try:\n        page_number = int(page)\n    except ValueError:\n        if page == 'last':\n            page_number = paginator.num_pages\n        else:\n            raise Http404(_(u\"Page is not 'last', nor can it be converted to an int.\"))\n    try:\n        page = paginator.page(page_number)\n        return (paginator, page, page.object_list, page.has_other_pages())\n    except InvalidPage:\n        raise Http404(_(u'Invalid page (%(page_number)s)') % {\n                            'page_number': page_number\n        })\n",
  "kwargs": "self, queryset, page_size",
  "line_number": 33
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "name": "get_template_names",
  "docstring": "Return a list of template names to be used for the request. Must return\na list. May not be called if get_template is overridden.",
  "code": "def get_template_names(self):\n    \"\"\"\n    Return a list of template names to be used for the request. Must return\n    a list. May not be called if get_template is overridden.\n    \"\"\"\n    try:\n        names = super(MultipleObjectTemplateResponseMixin, self).get_template_names()\n    except ImproperlyConfigured:\n        # If template_name isn't specified, it's not a problem --\n        # we just start with an empty list.\n        names = []\n    # If the list is a queryset, we'll invent a template name based on the\n    # app and model name. This name gets put at the end of the template\n    # name list so that user-supplied names override the automatically-\n    # generated ones.\n    if hasattr(self.object_list, 'model'):\n        opts = self.object_list.model._meta\n        names.append(\"%s/%s%s.html\" % (opts.app_label, opts.object_name.lower(), self.template_name_suffix))\n    return names\n",
  "kwargs": "self",
  "line_number": 126
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "child": [
   "CookieWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "child": [
   "NamedUrlCookieWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "child": [
   "NamedUrlSessionWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "child": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "child": [
   "SessionWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "TemplateView",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "child": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "child": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "child": [
   "TemplateView",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "child": [
   "TemplateView",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "child": [
   "ArchiveIndexView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseArchiveIndexView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "ArchiveIndexView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseArchiveIndexView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseDateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseDateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseDateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 2
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "DateMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseDateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 3
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseDetailView",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseDateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 4
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "DateMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 2
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseDayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseDayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseDayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 2
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseDayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 3
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseMonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseMonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseMonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 2
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseDayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseTodayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseWeekArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseWeekArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseWeekArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 2
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseYearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseYearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "child": [
   "DateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseDateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "DateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "child": [
   "DayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseDayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "DayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "child": [
   "MonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseMonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "MonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "child": [
   "TodayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseTodayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "TodayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "child": [
   "WeekArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseWeekArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "WeekArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "child": [
   "YearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseYearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "child": [
   "YearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseDetailView",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseDetailView",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "child": [
   "DetailView",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseDetailView",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "child": [
   "DetailView",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "child": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseCreateView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "ProcessFormView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseCreateView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "DeletionMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseDeleteView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseDetailView",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseDeleteView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseFormView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "ProcessFormView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseFormView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseUpdateView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "ProcessFormView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseUpdateView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "child": [
   "CreateView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseCreateView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "child": [
   "CreateView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "child": [
   "DeleteView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseDeleteView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "child": [
   "DeleteView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "child": [
   "FormView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseFormView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "child": [
   "FormView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "child": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "child": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "child": [
   "ProcessFormView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.4"
  ],
  "child": [
   "UpdateView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseUpdateView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "child": [
   "UpdateView",
   "django.views.generic.edit",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseListView",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "child": [
   "BaseListView",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "child": [
   "ListView",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseListView",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "child": [
   "ListView",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.4"
  ],
  "child": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.4"
  ],
  "order": 0
 }
}
]
